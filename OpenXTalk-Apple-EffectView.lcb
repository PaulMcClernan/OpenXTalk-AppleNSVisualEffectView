library org.openxtalk.library.appleeffectview
-- widget com.livecode.widget.appleEffectView.paulmcclernan

use com.livecode.engine
use com.livecode.foreign
use com.livecode.objc
use com.livecode.array
use com.livecode.list
use com.livecode.byte
use com.livecode.date
use com.livecode.binary
use com.livecode.bitwise
use com.livecode.math
use com.livecode.string
use com.livecode.widget
use com.livecode.canvas
use com.livecode.library.widgetutils

metadata version is "0.0.5"
metadata author is "Paul McClernan"
metadata title is "LCB AppleEffectViewLib"
metadata svgicon is "M92.17,0H0v149.53h118.32V25.82L92.17,0z M92.21,5.52l18.82,18.58c-8.47,0-17.1,0-18.82,0 C92.21,22.4,92.21,13.91,92.21,5.52z M114.42,145.63c0,0-106.82,0-110.52,0c0-3.74,0-137.98,0-141.73c2.56,0,52.51,0,84.41,0V28 h26.11V145.63z M25.53,28.15c0.82-0.57,1.49-1.35,2.02-2.34c2-3.74,0.38-9.3-4-10.64c-1.33-0.41-13.42-0.22-13.42-0.22v23.63h4.82 v-8.96C14.95,29.62,23.53,29.89,25.53,28.15z M14.93,25.6v-6.77c0,0,6.75-0.57,7.85,1.22c0.45,0.64,0.72,1.37,0.77,2.1 c0.05,0.77-0.15,1.54-0.62,2.19C21.73,25.99,14.93,25.59,14.93,25.6L14.93,25.6z M45.47,38.08c1.41-0.45,2.53-1.09,3.36-1.9 c1.1-1.07,1.94-2.47,2.54-4.2c0.99-3.56,0.98-7.12-0.05-10.68c-0.52-1.52-1.27-2.8-2.26-3.85c-0.99-1.05-2.18-1.78-3.57-2.19 c-1.04-0.3-2.54-0.45-4.51-0.45h-8.75v23.77h9.01C43,38.58,44.41,38.41,45.47,38.08C46.88,37.63,44.41,38.41,45.47,38.08z M37.13,18.76c1.95,0,4.2-0.04,5.99,0.29s2.93,1.26,3.57,3.42c0.64,2.18,0.88,6.25-0.17,9.08c-1.38,3.73-9.47,2.94-9.47,2.94 L37.13,18.76z M60.99,38.58h-4.81V14.81h16.27v4.02H60.99v5.61h9.87v4.02h-9.87V38.58z M92.46,89.89c2.59,0.75,4.82,2.09,6.61,4.35 c-7.62,6.63-7.21,13.02,1.26,19.16c-1.2,3.46-2.94,6.48-5.2,9.05c-1.71,2.31-3.59,3.6-5.65,3.82c-2.24,0.24-6.13-1.58-6.13-1.58 c-2.39-0.74-3.92-0.75-6.33,0.29c0,0-3.44,1.41-5.54,1.33c-3.26-0.12-5.93-2.7-8.01-7.39c-2.75-4.74-6.21-12.2-4.43-19.22 c1.29-5.11,5.49-10.13,11.5-10.45c1.78-0.09,3.72,0.22,5.8,1.07c0,0,3.26,1.25,4,1.24c0.65-0.01,1.29-0.16,1.95-0.44 c0,0,3.3-1.18,4.18-1.34C88.21,89.47,90.53,89.34,92.46,89.89z M88.53,78.67c0.17-0.02,0.44-0.05,0.8-0.1 c0.31,5.67-3.59,11.53-9.89,11.53c-0.42-2.83,0.47-5.44,2.67-7.84C83.97,80.22,86.11,79.03,88.53,78.67 C88.7,78.65,86.11,79.03,88.53,78.67z M64.03,75.44c0,0,18-2.12,21.8-8.64c0.13-0.22,0.36-1.06,0.36-1.06 c0.05-0.45-0.29-1.82-0.29-1.82c-0.21-1.37-0.92-2.31-2.05-2.72c-3.46-1.27-11.14,2.69-20.07,10.34c-2.91,0.23-5.71,0.25-8.32,0.05 c-6.18-0.57-13.48-3.88-20.58-9.31c-0.86-1.93-2.29-5.3-3.96-8.73c-1.68-3.45-3.88-7.72-5.72-9.85c-1.13-1.31-4.44-3.96-6.34-1.01 c-0.79,1.23-0.99,3.71-0.72,4.48C19.89,52.2,25.42,59,32.26,64.54c2.16,6.64,3.81,14.04,4.88,22.01 c2.99,22.17,2.51,34.94-1.41,38.08c-0.96-1.59-1.16-5.72-0.45-10.61c0.4-2.79,1.66-8.99,1.66-8.99c-4.97,9.39-5.18,16.41-3.86,19.57 c0.16,0.39,0.81,1.18,1.62,1.44c0.87,0.27,1.92,0,1.92,0c0.61-0.08,1.18-0.29,1.7-0.64c3.61-2.44,4.88-11.55,3.79-27.14 C47.47,90.94,64.03,75.44,64.03,75.44z M84.98,64.27c0.18,0.68-1.32,1.87-3.45,3.18s-11.7,3.34-11.7,3.34s5.91-4.15,10.42-6.05 C82.42,63.83,84.8,63.59,84.98,64.27z M20.78,45.8c-0.14-0.51,1.27-6.22,5.82,4.88c0.9,1.88,2.07,4.33,3.3,7.38 C25.14,53.58,21.63,48.9,20.78,45.8C20.64,45.29,21.63,48.9,20.78,45.8z M41.97,96.4c-0.24-3.04-0.57-6.32-0.97-9.78 c-0.83-7.12-2.1-13.2-3.86-18.52c5.97,3.93,12.02,6.34,17.57,6.98c1.54,0.18,3.19,0.26,4.92,0.25 C52.89,81.72,46.69,89.12,41.97,96.4"

public handler LogNSObjectClassName(in tNSObj as optional ObjcId)
   variable tOSStatus as CSInt
   variable tNSStrObj as optional ObjcId
   variable tStr as optional String
   if tNSObj is not nothing then
   unsafe
      put NSObjectClassName(tNSObj) into tNSStrObj
      put StringFromNSString(tNSStrObj) into tStr
      log tStr
   end unsafe
   else
      log "No Object"
   end if
end handler

public handler GetNSObjectClassName(in tNSObj as optional ObjcId) returns optional String
   variable tOSStatus as CSInt
   variable tNSStrObj as optional ObjcId
   variable tStr as optional String
   if tNSObj is not nothing then
   unsafe
      put NSObjectClassName(tNSObj) into tNSStrObj
      put StringFromNSString(tNSStrObj) into tStr
      return tStr
   end unsafe
   else
      return nothing
   end if
end handler


-------------------- Type Declarations -------------------------------
public foreign type CGSize binds to "MCAggregateTypeInfo:qq"
public foreign type NSRect binds to "MCAggregateTypeInfo:qqqq"
public foreign type CGImageRef binds to "MCAggregateTypeInfo:r"
public foreign type CGPoint binds to "MCAggregateTypeInfo:qq"

private variable sMyWindow as optional ObjcObject
private variable sMyWindowController as optional ObjcObject

private variable mNSVisualEffectView as optional ObjcObject
private variable mDocument as optional ObjcObject
private variable mNSVisualEffectViewProxy as optional ObjcObject
private variable sNSVisualEffectViewController as optional ObjcObject

------- foreign handlers ----------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------- NSApplication ------------------------------------------------------------------------------
private foreign handler NSApplicationSharedApplication() returns ObjcId binds to "objc:NSApplication.+sharedApplication"
private foreign handler NSApplicationRequestUserAttention(in sharedApplication as ObjcId, in requestType as CLong) returns CLong binds to "objc:NSApplication.-requestUserAttention:"
private foreign handler NSApplicationMiniaturizeAll( in sharedApplication as optional ObjcId, in pSenderID as optional any) returns nothing binds to "objc:NSApplication.-miniaturizeAll:"
private foreign handler NSApplicationHide ( in sharedApplication as ObjcId, in pSenderID as optional any) returns nothing binds to "objc:NSApplication.-hide:"
private foreign handler NSApplicationUnhide ( in sharedApplication as ObjcId, in pSenderID as optional any) returns nothing binds to "objc:NSApplication.-unhide:"
private foreign handler NSApplicationWindowWithWindowNumber(in pSharedApplication as ObjcId, in pWindowNumber as CLong) returns ObjcId binds to "objc:NSApplication.-windowWithWindowNumber:"
private foreign handler NSApplicationGetNSDockTile(in sharedApplication as ObjcId) returns ObjcId binds to "objc:NSApplication.-dockTile"
private foreign handler NSApplicationSetAppearance(in pNSWindow as ObjcId, in pAppearanceNameNSStr as ObjcId) returns nothing binds to "objc:NSApplication.-setAppearance:"
private foreign handler NSAppWindowWithWindowNumber(in pObj as ObjcId, in pWindowNumber as CLong) returns ObjcId binds to "objc:NSApplication.-windowWithWindowNumber:"
private foreign handler NSApplicationGetTargetForAction(in pNSApp as ObjcId, in pSelectorNSStr as ObjcId ) returns ObjcId binds to "objc:NSApplication.-targetForAction:"
-- Returns the object that receives the action message specified by the given selector.
--private foreign handler NSApplicationSetAppIconImage(in sharedApplication as ObjcId, in iconImage as ObjcId) returns ObjcId binds to "objc:NSApplication.-setApplicationIconImage:" -- CHRASH!!!

--------------------------------------------------------------   NSRunningApplication ----------------------------------------------------------------

private foreign handler NSRunningApplicationBundleIdentifier(in pObj as ObjcId) returns optional ObjcId binds to "objc:NSRunningApplication.-bundleIdentifier"
private foreign handler NSRunningApplicationProcessIdentifier(in pObj as ObjcId) returns CInt binds to "objc:NSRunningApplication.-processIdentifier"

----------------------------------------------------------------------  NSWorkSpace  --------------------------------------------------------------------------

private foreign handler NSWorkspaceSharedWorkspace() returns ObjcId binds to "objc:NSWorkspace.+sharedWorkspace"
private foreign handler NSWorkspaceSelectFile(in pSharedWorkspace as ObjcId, in pFilename as ObjcId, in pRootedAtPath as ObjcId) returns CBool binds to "objc:NSWorkspace.-selectFile:inFileViewerRootedAtPath:"
private foreign handler NSWorkspaceIsFilePackageAtPath(in pSharedWorkspace as ObjcId, in pFilename as ObjcId) returns CBool binds to "objc:NSWorkspace.-isFilePackageAtPath:"
private foreign handler NSWorkspaceRunningApplications(in pSharedWorkspace as ObjcId) returns ObjcId binds to "objc:NSWorkspace.-runningApplications"
private foreign handler NSWorkspaceLaunchApplication(in pSharedWorkspace as ObjcId, in pAppName as ObjcId) returns CBool binds to "objc:NSWorkspace.launchApplication:"
private foreign handler NSWorkspaceFrontmostApplication(in pSharedWorkspace as ObjcId) returns ObjcId binds to "objc:NSWorkspace.-frontmostApplication"
private foreign handler NSWorkspaceURLForAppBundleID(in pSharedWorkspace as ObjcId, in pBundleID as ObjcId ) returns ObjcId binds to "objc:NSWorkspace.-URLForApplicationWithBundleIdentifier:"

--------------------------------------------------------------   Notifications ----------------------------------------------------------------

private foreign handler NSNotificationCenter() returns ObjcId binds to "objc:NSNotificationCenter.+defaultCenter"
private foreign handler NSNotificationCenterAddObserverForSelector( in pNotificationCenter as ObjcId, in pObserver as ObjcId, in pSelectorNSStr as optional ObjcId, \
                                          in pNameNSStr as optional ObjcId, in pSender as optional ObjcId) returns ObjcId binds to "objc:NSNotificationCenter.-addObserver:selector:name:object:"
private foreign handler NSNotificationCenterAddObserverForNameUsingBlock( in pNotificationCenter as ObjcId, in pObserverForNameNSStr as ObjcId, in pObject as optional ObjcId, \
                                          in pQueue as optional ObjcId, in pBlock as ObjcBlockPointer) returns ObjcId binds to "objc:NSNotificationCenter.-addObserverForName:object:queue:usingBlock:"
--- private foreign handler NSTextFieldSetTarget(in pObj as ObjcId, in pTarget as ObjcId) returns nothing binds to "objc:NSTextField.-setTarget:"
-- private foreign handler NSTextFieldSetAction(in pObj as ObjcId, in pAction as UIntPtr) returns nothing binds to "objc:NSTextField.-setAction:"
-- put ObjcProxyGetTarget(TextFieldActionCallback, nothing) into mTextFieldProxy
-- NSTextFieldSetTarget(mTextFieldView, mTextFieldProxy)
-- NSTextFieldSetAction(mTextFieldView, ObjcProxyGetAction())
-- private variable mTextFieldView as optional ObjcObject
-- private variable mTextFieldProxy as optional ObjcObject
private foreign handler NSUserNotificationCenterDefaultUserNotificationCenter() returns ObjcId binds to "objc:NSUserNotificationCenter.+defaultUserNotificationCenter"
private foreign handler NSUserNotificationAlloc() returns ObjcRetainedId binds to "objc:NSUserNotification.+alloc"
private foreign handler NSUserNotificationInit(in anInstance as ObjcId) returns ObjcId binds to "objc:NSUserNotification.-init"
private foreign handler NSUserNotificationSetProperty(in Obj as ObjcId, in pValue as ObjcId, in pProp as ObjcId) returns nothing binds to "objc:NSUserNotification.-setValue:forKey:"
private foreign handler NSUserNotificationCenterDeliverNotification(in defaultUserNotificationCenter as ObjcId, in aNotificationInstance as ObjcId) returns nothing binds to "objc:NSUserNotificationCenter.-deliverNotification:"

private foreign handler NSDistributedNotificationCenterDefaultCenter() returns ObjcId binds to "objc:NSDistributedNotificationCenter.+defaultCenter"
private foreign handler NSDistributedNotificationCenterPostNotificationNameObject(in defaultCenter as ObjcId, in notificationName as ObjcId, in notificationObject as ObjcId) returns nothing binds to "objc:NSDistributedNotificationCenter.-postNotificationName:object:"

-------------------------------------------------------------- NSURL ------------------------------------------------------------------------------
private foreign handler NSURLURLWithString(in pURLString as ObjcId) returns ObjcId binds to "objc:NSURL.+URLWithString:"
private foreign handler NSURLfileOrDirURLWithPath(in pPathString as ObjcId, in pIsDir as CBool) returns ObjcId binds to "objc:.NSURL.+fileURLWithPath:isDirectory:"
private foreign handler NSURLfileURLWithPath(in pPathString as ObjcId) returns ObjcId binds to "objc:NSURL.+fileURLWithPath:"
private foreign handler NSURLGetAbsoluteString(in pURLString as ObjcId) returns ObjcId binds to "objc:NSURL.absoluteString"
private foreign handler NSURLGetPath(in pURLString as ObjcId) returns ObjcId binds to "objc:NSURL.path"

------------------------------------------------------------ NSBundle ------------------------------------------------------------------------------
private foreign handler NSBundleWithURL(in pNSURL as ObjcId) returns ObjcId binds to "objc:NSBundle.+bundleWithURL:"
private foreign handler NSBundleGetClassNamed(in pNSbundle as ObjcId,in pClassNameNSString as ObjcId) returns ObjcId binds to "objc:NSBundle.-classNamed:"

------------------------------------------------------------ NSDockTile ------------------------------------------------------------------------------
private foreign handler NSDockTileSetBadgeLabelProp(in pNSDockTile as ObjcId, in pNSString as ObjcId, in pSelectorNSString as ObjcId ) returns nothing binds to "objc:NSDockTile.-setValue:forKey:"
private foreign handler NSDockTileSetShowAppBadge(in pNSDockTile as ObjcId, in pValue as cBool, in pSelectorNSString as ObjcId) returns nothing binds to "objc:NSDockTile.-setValue:forKey:"
private foreign handler NSDockTileDisplay(in pNSDockTile as ObjcId) returns nothing binds to "objc:NSDockTile.-display"

------------------------------------------------------------ NSArray / NSMutableArray ------------------------------------------------------------------------------
private foreign handler NSMutableArrayAlloc() returns ObjcRetainedId binds to "objc:NSMutableArray.+alloc"
private foreign handler NSMutableArrayInitWithCapacity(in pNSMutableArray as ObjcId, in pCapacity as NaturalFloat) returns ObjcId binds to "objc:NSMutableArray.-initWithCapacity:"
private foreign handler NSMutableArrayInitWithNSArray(in pNSMutableArray as ObjcId, in pNSArray as ObjcId) returns ObjcId binds to "objc:NSMutableArray.-initWithArray:"

-------------------------------------------------------------- NSImage ------------------------------------------------------------------------------
private foreign handler NSImageAlloc() returns ObjcRetainedId binds to "objc:NSImage.+alloc"
private foreign handler NSImageInitWithData(in pObj as ObjcRetainedId, in pData as ObjcId) returns optional ObjcRetainedId binds to "objc:NSImage.-initWithData:"
private foreign handler NSImageInitWithContentsOfFile(in pObj as ObjcRetainedId, in pFilename as ObjcId) returns optional ObjcRetainedId binds to "objc:NSImage.-initWithContentsOfFile:"
private foreign handler NSImageSetTemplate(in pObj as ObjcId, in pTemplate as CBool) returns nothing binds to "objc:NSImage.-setTemplate:"
private foreign handler NSImageInitFromFile(in pPathNSString as ObjcId) returns ObjcId binds to "objc:NSImage.-initWithContentsOfFile:" -- correct!!!
-------------------------------------------------------------- NSWindow ------------------------------------------------------------------------------
private foreign handler NSWindowAlloc() returns ObjcRetainedId binds to "objc:NSWindow.+alloc"
private foreign handler NSWindowDealloc(in pNSWindow as ObjcId) returns nothing binds to "objc:NSWindow.-dealloc"
private foreign handler NSWindowInitWithRectStyleBackingDefer(in pObj as ObjcRetainedId, in pRect as NSRect, in pStyleMask as CLong, in pBackingStoreType as CLong, in pDefer as CBool) \
                                                       returns ObjcId binds to "objc:NSWindow.-initWithContentRect:styleMask:backing:defer:"
--private foreign handler NSWindowInitWithRectStyleBackingDefer(in pObj as ObjcRetainedId, in pRect as NSRect, in pStyleMask as CLong, in pBackingStoreType as CLong, in pDefer as CBool) \
                        -- returns ObjcId binds to "objc:NSWindow.-initWithContentRect:styleMask:backing:defer:"
private foreign handler NSWindowGetReleasedWhenClosed(in pNSWindow as ObjcId) returns CBool binds to "objc:NSWindow.isReleasedWhenClosed"

private foreign handler NSWindowSetTitle(in pNSWindow as ObjcId, in pTitleNSStr as ObjcId) returns nothing binds to "objc:NSWindow.-setTitle:"
private foreign handler NSWindowGetStyleMask(in pNSWindow as ObjcId) returns CLong binds to "objc:NSWindow.-styleMask"
private foreign handler NSWindowSetStyleMask(in pNSWindow as ObjcId, in pOptions as CInt) returns nothing binds to "objc:NSWindow.-setStyleMask:"

private foreign handler NSWindowSetLevel(in pNSWindow as ObjcId, in pLevel as CInt) returns nothing binds to "objc:NSWindow.-setLevel:"
private foreign handler NSWindowGetLevel(in pNSWindow as ObjcId) returns CInt binds to "objc:NSWindow.-level"

private foreign handler NSWindowCreateWithViewController(in pNSViewController as ObjcId) returns ObjcRetainedId binds to "objc:NSWindow.+windowWithContentViewController:"
private foreign handler NSWindowSetContentView(in pNSWindow as ObjcId, in pNSView as ObjcId) returns nothing binds to "objc:NSWindow.-setContentView:"
-- private foreign handler NSWindowSetTitlebarTransparent(in pObj as ObjcId, in pBool as CBool) returns nothing binds to "objc:NSWindow.titlebarAppearsTransparent"

private foreign handler NSWindowSetValueForKey( in pNSWindow as ObjcId, in pValue as ObjcRetainedId, in pSelector as ObjcId) returns nothing binds to "objc:NSWindow.-setValue:forKey:"
private foreign handler NSWindowSetBoolValueForKey( in pNSWindow as ObjcId, in pValue as CBool, in pSelector as ObjcId) returns nothing binds to "objc:NSWindow.-setValue:forKey:"

private foreign handler NSWindowSetTitleVisibility(in pNSWindow as ObjcId, in pVisibleUnum as ObjcId) returns nothing binds to "objc:NSWindow.-setTitleVisibility:"
private foreign handler NSWindowSetAppearance(in pNSWindow as ObjcId, in pAppearanceNameNSStr as ObjcId) returns nothing binds to "objc:NSWindow.-setAppearance:"
private foreign handler NSWindowPerformMiniaturize(in pNSWindow as ObjcId, in pSenderID as optional any) returns nothing binds to "objc:NSWindow.-performMiniaturize:" -- (void)performMiniaturize:(id)sender;
private foreign handler NSWindowDeminiaturize(in pNSWindow as ObjcId, in pSenderID as ObjcId) returns nothing binds to "objc:NSWindow.-deminiaturize:"
private foreign handler NSWindowIsMiniaturized(in pNSWindow as ObjcId) returns CBool binds to "objc:NSWindow.isMiniaturized"
private foreign handler NSWindowSetCollectionBehavior(in pNSWindow as ObjcId, in collectionBehavior as CLong) returns nothing binds to "objc:NSWindow.-setCollectionBehavior:"
private foreign handler NSWindowGetCollectionBehavior(in pNSWindow as ObjcId) returns CLong binds to "objc:NSWindow.-collectionBehavior"
private foreign handler NSWindowToggleFullScreen(in pNSWindow as optional ObjcId, in pSenderID as optional any) returns nothing binds to "objc:NSWindow.-toggleFullScreen:"

private foreign handler NSWindowSetContentViewController(in pNSWindow as ObjcId, in pViewController as ObjcId) returns nothing binds to "objc:NSWindow.-setContentView:"
private foreign handler NSWindowGetContentViewController(in pNSWindow as ObjcId) returns ObjcId binds to "objc:NSWindow.-contentViewController"

private foreign handler NSWindowGetWindowController(in pNSWindow as ObjcId) returns ObjcId binds to "objc:NSWindow.-windowController"
-------------------------------------------------------------- NSWindowController ------------------------------------------------------------------------------
private foreign handler NSWindowControllerAlloc() returns ObjcRetainedId binds to "objc:NSWindowController.+alloc"
private foreign handler NSWindowControllerDealloc(in pNSWindowController as ObjcId) returns nothing binds to "objc:NSWindowController.-dealloc"
private foreign handler NSWindowControllerInitWithWindow(in pNSWindowController as ObjcRetainedId,in pNSWindow as ObjcRetainedId) returns ObjcId binds to "objc:NSWindowController.-initWithWindow:"
--private foreign handler NSWindowControllerInitWithWindow(in pObj as ObjcId,in pNSWindow as ObjcId) returns ObjcId binds to "objc:NSWindowController.-initWithWindow:"
private foreign handler NSWindowControllerShowWindow(in pNSWindowController as ObjcId,in pNSWindow as ObjcId) returns nothing binds to "objc:NSWindowController.-showWindow:"
private foreign handler NSWindowControllerClose(in pNSWindowController as ObjcId) returns nothing binds to "objc:NSWindowController.-close"

-------------------------------------------------------------- NSView ------------------------------------------------------------------------------
private foreign handler NSViewControllerAlloc() returns ObjcRetainedId binds to "objc:NSViewController.+alloc"
private foreign handler NSViewControllerDealloc(in pNSViewController as ObjcId) returns nothing binds to "objc:NSViewController.-dealloc"
-------------------------------------------------------------------------------------------  Apple EffectView Bindings ----------------------------------------------------------------------------------------
private foreign handler NSAppearanceNewAppearanceNamed(in pNSStringAppearanceName as ObjcId) returns ObjcId binds to "objc:NSAppearance.+appearanceNamed:"
private foreign handler AppleNSEffectViewAlloc() returns ObjcId binds to "objc:NSVisualEffectView.+alloc"
private foreign handler AppleEffectViewNSVisualEffectViewInit(in pNSVisualEffectView as ObjcRetainedId) returns ObjcRetainedId binds to "objc:NSVisualEffectView.-init"
-- private foreign handler AppleEffectViewPDFSetDocument(in pNSVisualEffectView as ObjcId, in pPDFDocument as ObjcId) returns nothing binds to "objc:objc:NSVisualEffectView.-document:"
private foreign handler NSVisualEffectViewSetValueForKey(in pPDFDocument as ObjcId, in pValue as ObjcId, in pSelector as ObjcId) returns nothing binds to "objc:NSVisualEffectView.-setValue:forKey:"
private foreign handler NSVisualEffectViewSetBoolValueForKey(in pPDFDocument as ObjcId, in pValue as CBool, in pSelector as ObjcId) returns nothing binds to "objc:NSVisualEffectView.-setValue:forKey:"
private foreign handler NSVisualEffectViewValueForKey(in pPDFDocument as ObjcId, in pSelector as ObjcId) returns ObjcId binds to "objc:NSVisualEffectView.-valueForKey:"

------------------------------------------ General Objtive C Cocoa / Foundation Bindings ------------------------------------------------------------------------------
private foreign handler NSObjectRetain(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.-retain"
private foreign handler NSObjectAutoRealease(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.-autorelease"
private foreign handler NSObjectRelease(in pNSObj as ObjcId) returns nothing binds to "objc:NSObject.-release"
private foreign handler NSObjectDescription(in pNSObj as optional ObjcId) returns ObjcId binds to "objc:NSObject.description"
private foreign handler NSObjectClassName(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.className"
private foreign handler NSObjectGetSuperClass(in pNSObj as ObjcId) returns ObjcRetainedId binds to "c:NObject.+superclass:"
private foreign handler c_NSClassFromString(in pClassNameString as ObjcId) returns ObjcId binds to "c:NSClassFromString"
private foreign handler NSErrorAlloc() returns ObjcId binds to "objc:NSError.+alloc"
private foreign handler c_CFErrorCopyDescription(in pCFErrorRef as ObjcId) returns ObjcId binds to "c:CFErrorCopyDescription"


private handler NSWindowFromWindowID(in windowID as Integer) returns ObjcId
	variable NSSharedApplication as ObjcId
	variable tNSWindow as ObjcId
	unsafe
	put NSApplicationSharedApplication() into NSSharedApplication
	put NSApplicationWindowWithWindowNumber(NSSharedApplication, windowID) into tNSWindow
	end unsafe
	return tNSWindow
end handler


private variable mNSVisualEffectViewVisiblePageChangedCallbackBlkPtr as optional ObjcBlockPointer
private handler NSVisualEffectViewVisiblePageChangedCallback(in pBlock as optional ObjcBlockPointer, in pNotification as optional ObjcId)
   if pNotification is not nothing then
      variable tStr as optional String
      put StringFromNSString(pNotification) into tStr
      log tStr
   end if
   post "NSVisualEffectViewVisiblePageChanged" to sTarget
end handler
private variable mNSVisualEffectViewPageChangedCallbackBlkPtr as optional ObjcBlockPointer
private handler NSVisualEffectViewPageChangedCallback(in pBlock as optional ObjcBlockPointer, in pNotification as optional ObjcId)
   if pNotification is not nothing then
      variable tStr as optional String
      put StringFromNSString(pNotification) into tStr
      log tStr
   end if
   post "NSVisualEffectViewChangedHistory" to sTarget
   -- log "NSVisualEffectViewPageChanged"
end handler

public handler NSVisualEffectViewInitCallbacks()
    if mNSVisualEffectViewVisiblePageChangedCallbackBlkPtr is nothing then
     	 if not CreateObjcBlockPointerFromHandler(NSVisualEffectViewVisiblePageChangedCallback, mNSVisualEffectViewVisiblePageChangedCallbackBlkPtr) then
     	   put nothing into mNSVisualEffectViewVisiblePageChangedCallbackBlkPtr
         log "Error Creating Callback Pointer"
      else
         log mNSVisualEffectViewVisiblePageChangedCallbackBlkPtr
      end if
   end if

   if mNSVisualEffectViewPageChangedCallbackBlkPtr is nothing then
     if not CreateObjcBlockPointerFromHandler(NSVisualEffectViewVisiblePageChangedCallback, mNSVisualEffectViewPageChangedCallbackBlkPtr) then
        put nothing into mNSVisualEffectViewPageChangedCallbackBlkPtr
        log "Error Creating Callback Pointer"
     else
        log mNSVisualEffectViewPageChangedCallbackBlkPtr
     end if
     --  put the caller into sTarget
     -- resolve script object "this stack"
     -- put the result into sTarget
   end if
end handler

public handler NSVisualEffectViewRemoveCallbacks()
	if mNSVisualEffectViewVisiblePageChangedCallbackBlkPtr is not nothing then
		DeleteObjcBlockPointer(mNSVisualEffectViewVisiblePageChangedCallbackBlkPtr)
      DeleteObjcBlockPointer(mNSVisualEffectViewPageChangedCallbackBlkPtr)
		put nothing into mNSVisualEffectViewVisiblePageChangedCallbackBlkPtr
      put nothing into mNSVisualEffectViewPageChangedCallbackBlkPtr
	 end if
end handler

private variable sTarget as ScriptObject
-- NotificationCenter.default.addObserver(self, selector: #selector(handlePageChange(notification:)), name: Notification.Name.NSVisualEffectViewPageChanged, object: nil)
-- @objc private func handlePageChange(notification: Notification) { print("Page changed") }
-- https://developer.apple.com/documentation/foundation/nsnotificationcenter/1411723-addobserverforname?language=objc
-- https://developer.apple.com/documentation/foundation/nsnotificationcenter/1414169-defaultcenter?language=objc
public handler getDefaultNotificationCenterAndAddObserverNSVisualEffectViewPageChanged() -- in pTargetLCSObj as String) returns nothing
   variable tOSStatus as CSInt
   variable tNSObj as optional ObjcId
   variable tNSNotificationCenter as optional ObjcId
   variable tStr as optional String
   -- resolve script object pTargetLCSObj
   -- put the result into sTarget
   resolve script object "this stack"
   put the result into sTarget

   unsafe
      put NSNotificationCenter() into tNSNotificationCenter
      put NSObjectClassName(tNSNotificationCenter) into tNSObj
      put StringFromNSString(tNSObj) into tStr
      log tStr
      -- put ObjcProxyGetTarget(NSVisualEffectViewCallback, nothing) into mNSVisualEffectViewProxy
      -- NSNotificationCenter.addObserver:selector:name:object
      -- NSNotificationCenterAddObserverForSelector( tNSNotificationCenter, mNSVisualEffectViewProxy, StringToNSString("NSWindowDidBecomeMainNotification"), nothing, nothing )
      NSVisualEffectViewInitCallbacks()
      -- NSNotificationCenterAddObserverForNameUsingBlock(tNSNotificationCenter, StringToNSString("NSVisualEffectViewChanged"), mNSVisualEffectView, nothing, mNSVisualEffectViewVisiblePageChangedCallbackBlkPtr )
      -- NSNotificationCenterAddObserverForNameUsingBlock(tNSNotificationCenter, StringToNSString("NSVisualEffectViewPageChanged"), mNSVisualEffectView, nothing, mNSVisualEffectViewPageChangedCallbackBlkPtr )
      NSNotificationCenterAddObserverForNameUsingBlock(tNSNotificationCenter, StringToNSString("NSVisualEffectViewSomething"), mNSVisualEffectView, nothing, mNSVisualEffectViewPageChangedCallbackBlkPtr )

      -- NSNotificationCenterAddObserverForNameUsingBlock(tNSNotificationCenter, StringToNSString("NSVisualEffectViewVisiblePagesChanged"), nothing, nothing, mNSVisualEffectViewProxyBlockPtr )
      -- NSNotificationCenterAddObserverForNameUsingBlock(tNSNotificationCenter, StringToNSString("NSVisualEffectViewVisiblePagesChanged"), mNSVisualEffectView, nothing, mNSVisualEffectViewProxyBlockPtr )
      -- NSVisualEffectViewCopyPermission	 = Posted when the user attempts to copy to the pasteboard without the appropriate permissions.
      -- NSVisualEffectViewDisplayBoxChanged	 = Posted when the display box has changed.
      -- NSVisualEffectViewDisplayModeChanged	 = Posted when the display mode has changed.
      -- NSVisualEffectViewDocumentChanged	 = Posted when a new document is associated with the view.
      -- NSVisualEffectViewPrintPermission	 = Posted when the user attempts to print without the appropriate permissions.
      -- NSVisualEffectViewScaleChanged	 = Posted when the scale factor changes.
      -- NSVisualEffectViewSelectionChanged	 = Posted when the current selection has changed.
   end unsafe
   -- log "Notification.Name.NSVisualEffectViewPageChanged"
end handler


public handler NSVisualEffectViewMakeNSVisualEffectViewWindow(in pPathToPDFStr as optional String) returns optional any
-- public handler AppleEffectViewMakeNSVisualEffectViewWindow() returns optional any
   --- need NSURL objects to pass
   variable tFileNSURL as ObjcId
   --- need NSError object to pass to AVMIDIplayer
   variable tNSError as optional ObjcId
   variable tNSObj as optional ObjcId
   variable tString as String
   variable tNumber as Integer
   variable tBackingStore as CLong
   variable tNSSharedApplication as ObjcId
   variable tNSRect as NSRect
   variable tWindow as optional ObjcObject
   variable tStyleMask as CLong
   variable tStr as String

   if (the operating system is "mac") then
      -- variable tIsDir as optional CBool
      -- put false into tIsDir
      unsafe
         put AppleNSEffectViewAlloc() into mNSVisualEffectView
         AppleEffectViewNSVisualEffectViewInit(mNSVisualEffectView)
         -- put NSURLfileURLWithPath(StringToNSString(pPathToPDFStr)) into tFileNSURL
         --put AppleEffectViewPDFDocumentAlloc() into mPDFDocument
         -- put AppleEffectViewPDFDocumentInitFromURL(mPDFDocument,tFileNSURL) into mPDFDocument
         -- AppleEffectViewPDFSetDocument(mNSVisualEffectView,mPDFDocument)
         -- AppleEffectViewNSVisualEffectViewSetValueForKey(mNSVisualEffectView,mPDFDocument,StringToNSString("document"))
         -- AppleEffectViewNSVisualEffectViewSetBoolValueForKey(mNSVisualEffectView,true,StringToNSString("autoScales"))
         -- LogNSObjectClassName(tFileNSURL)
         --LogNSObjectClassName(mNSVisualEffectView)
         --LogNSObjectClassName(mPDFDocument)
         --put AppleEffectViewPDFDocumentGetPageCount(mPDFDocument) into tNSNumber
         --put AppleEffectViewPDFDocumentValueForKey(mPDFDocument,StringToNSString("pageCount")) into tNSObj
         --log tNSObj
         --put NumberFromNSNumber(tNSObj) into tNumber
         --log ["PageCount",tNumber]
         --put AppleEffectViewPDFDocumentValueForKey(mPDFDocument,StringToNSString("string")) into tNSObj
         --put StringFromNSString(tNSObj) into tString
         --log tString

      -- if pWindowH is nothing then
      -- put 200 into pWindowH
      --end if
      --if pWindowW is nothing then
      --   put 200 into pWindowW
      --end if
      ----------------------------------------------------------------------------- style Mask
      -- Borderless = 0
      -- Titled = 1
      -- Closable = 2
      -- Miniaturizable = 4
      -- Resizable = 8
      -- Utility = 16
      -- DocModal = 64
      -- NonactivatingPanel = 128
      -- TexturedBackground = 256
      -- Unscaled = 2048
      -- UnifiedTitleAndToolbar = 4096
      -- Hud = 8192
      -- FullScreenWindow = 16384
      -- FullSizeContentView = 32768
      -- put 1 shifted left by 0 bitwise into tStyleMask -- titlebar only
      -- put 23 into tStyleMask -- <- Titled is 1 + Closable is 2 + Utility is 16 + Miniaturizable is 4 = 23
         put 11 + 4096 + 256 + 32768 into tStyleMask -- <- Titled is 1 + Closable is 2 + Resizable is 8
      -- put 64+8 into tStyleMask
       ------------------------------------------------------------------------------------------------------- Backing Store Type

         --  put 0 into tBackingStore -- NSBackingStoreType: NSBackingStoreRetained = 0 (Deprecated as of macOS 10.13),
         --    You should not use this mode. It combines the limitations of NSBackingStoreNonretained with the memory use of NSBackingStoreBuffered.
         --     The NeXTSTEP implementation was an interesting compromise that worked well with fast memory mapped framebuffers on the CPU bus—
         --     something that hasn't been in general use since around 1994. These tend to have performance problems.
         --  put 1 into tBackingStore -- NSBackingStoreType: NSBackingStoreNonretained = 1 (Deprecated as of macOS 10.13)
         --    You should not use NSBackingStoreNonretained mode. It exists primarily for use in the original Classic Blue Box.
         --    It does not support Quartz drawing, alpha blending, or opacity, no hardware acceleration,
         --    and interferes with system-wide display acceleration
         put 2 into tBackingStore -- NSBackingStoreType: NSBackingStoreBuffered = 2
         -- You SHOULD use NSBackingStoreBuffered mode. It supports hardware acceleration, Quartz drawing, alpha channels, opacity controls, using the compositor.
         put [640,640,500,500] into tNSRect
         put NSWindowAlloc() into sMyWindow
         put NSWindowInitWithRectStyleBackingDefer(sMyWindow,tNSRect,tStyleMask,tBackingStore,true) into sMyWindow
        -- log sMyWindow
         NSWindowSetTitle(sMyWindow,StringToNSString(pPathToPDFStr))
         NSWindowSetBoolValueForKey(sMyWindow,true,StringToNSString("titlebarAppearsTransparent")) --- add this and other NSWindow properties to lcb_MacTools
         -------------------------------------------------------------
         put NSWindowControllerAlloc() into sMyWindowController
         put NSWindowControllerInitWithWindow(sMyWindowController,sMyWindow) into sMyWindowController
         NSWindowControllerShowWindow(sMyWindowController,sMyWindow)
         -- NSWindowSetValueForKey(sMyWindow,mNSVisualEffectView,StringToNSString("contentView"))
         NSWindowSetContentView(sMyWindow, mNSVisualEffectView)
         -- NSWindowSetContentViewController(sMyWindow, mNSVisualEffectView)
       end unsafe
    end if
end handler

/**
Assign the macOS native "dark mode" window style to a stack's window

Example:
setWindowToDarkMode the windowID of this stack

Parameters:
windowID (integer): retrieved from a stack's windowID property.

Description:
This handler will set the macOS dark appearance of the window passed.
*/
private variable mNSAppearance as optional ObjcObject
public handler setWindowToDarkModeWithStyle(in pWindowID as Integer, in pStyleMask as optional Integer) returns nothing
	if (the operating system is "mac") then
		variable tNSWindow as optional ObjcId
      variable tNSWindowController as optional ObjcId
      variable tNSWindowContentViewController as optional ObjcId
      variable tNSAppearance as optional ObjcId

		unsafe
			put NSWindowFromWindowID(pWindowID) into tNSWindow
         -- log tNSWindow
         ------------------------------------------------------------------- It seems thst LiveCode stack windows on macOS are customized subclass of NSWindow
         -- LogNSObjectClassName(tNSWindow) -- logs the class name as "com_runrev_livecode_MCWindow"
         -- put NSWindowGetWindowController(tNSWindow) into tNSWindowController
         -- log tNSWindowController --- logs null, so apparently the stack window class "com_runrev_livecode_MCWindow" has no NSWindowController assigned to it.
         -- put NSWindowGetContentViewController(tNSWindow) into tNSWindowContentViewController
         -- log tNSWindowContentViewController --- logs null, so apparently the stack window class "com_runrev_livecode_MCWindow" has no tNSWindowContentViewController assigned to it.

         --------- create an NSWindowController and attaches it to the Stack Window:
         -- put NSWindowControllerAlloc() into tNSWindowContentViewController
         -- put NSWindowControllerInitWithWindow(tNSWindowContentViewController,tNSWindow) into tNSWindowContentViewController
         -- log tNSWindowContentViewController
         -- LogNSObjectClassName(tNSWindowContentViewController)
         ------------------------------------------------------------------ Do The DarkMode ------------------------------------------------------
         put NSAppearanceNewAppearanceNamed( StringToNSString("NSAppearanceNameVibrantDark") ) into mNSAppearance
         -- put NSAppearanceNewAppearanceNamed( StringToNSString("NSAppearanceName..") ) into mNSAppearance

         ------------------------------------------------------------------ Appearance Names: ------------------------------------------------------
         -- NSAppearanceNameAqua - The standard light system appearance.
         -- NSAppearanceNameDarkAqua - The standard dark system appearance.
         -- NSAppearanceNameVibrantLight - The light vibrant appearance, available only in visual effect views.
         -- NSAppearanceNameVibrantDark - A dark vibrant appearance, available only in visual effect views.
         -- NSAppearanceNameAccessibilityHighContrastAqua - A high-contrast version of the standard light system appearance.
         -- NSAppearanceNameAccessibilityHighContrastDarkAqua - A high-contrast version of the standard dark system appearance.
         -- NSAppearanceNameAccessibilityHighContrastVibrantLight - A high-contrast version of the light vibrant appearance.
         -- NSAppearanceNameAccessibilityHighContrastVibrantDark - A high-contrast version of the dark vibrant appearance.
         -- Deprecated Names:x
         -- NSAppearanceNameLightContent - The standard appearance that can be used by controls in light content areas (not including window-frame areas).

         -- LogNSObjectClassName(tNSAppearance)
         put AppleNSEffectViewAlloc() into mNSVisualEffectView
         AppleEffectViewNSVisualEffectViewInit(mNSVisualEffectView)
         NSWindowSetAppearance(tNSWindow,mNSAppearance)

         -- Borderless = 0
         -- Titled = 1 LCS 'Decoration' = "title"
         -- Closable = 2 LCS 'Decoration' = "close"
         -- Miniaturizable = 4 LCS 'Decoration' =" minimize"
         -- Resizable = 8 -- LCS equivelant is stack "resizable" property
         -- Utility = 16
         -- DocModal = 64
         -- NonactivatingPanel = 128
         -- TexturedBackground = 256 (deprecated as of macOS 10.10)
         -- Unscaled = 2048
         -- UnifiedTitleAndToolbar = 4096
         -- Hud = 8192
         -- CanFullScreenWindow = 16384 LCS 'maximize' ="
         -- FullSizeContentView = 32768 --
         if pStyleMask is nothing then
            put ( 1 + 2 + 4 + 16 + 4096 + 32768 ) into pStyleMask -- UnifiedTitleAndToolbar, FullSizeContentView
         end if
         NSWindowSetBoolValueForKey(tNSWindow,true,StringToNSString("titlebarAppearsTransparent"))
         NSWindowSetStyleMask(tNSWindow,pStyleMask)

         --NSWindowSetTitleVisibility(tNSWindow,NumberToNSNumber(1)) --- 1 = TitleBar hidden, 0 = TitleBar Visible
         -- window?.appearance
         -- NSWindowSetContentView(tNSWindow, mNSVisualEffectView)
		end unsafe
	end if
end handler


/**
Assign the macOS native "light mode" window style to a stack's window

Example:
setWindowToLightMode the windowID of this stack

Parameters:
windowID (integer): retrieved from a stack's windowID property.

Description:
This handler will set the macOS "light" appearance of the window passed.
*/
public handler setWindowToLightModeithStyle(in pWindowID as Integer, in pStyleMask as Integer) returns nothing
	if (the operating system is "mac") then
		variable tNSWindow as optional ObjcId
		unsafe
			put NSWindowFromWindowID(pWindowID) into tNSWindow
         ------------------------------------------------------------------ Do The LightMode ------------------------------------------------------
         put NSAppearanceNewAppearanceNamed( StringToNSString("NSAppearanceNameVibrantLight") ) into mNSAppearance
         NSWindowSetAppearance(tNSWindow,mNSAppearance)
		end unsafe
	end if
end handler


public handler CloseWindow()
   unsafe
      if sMyWindowController is not nothing then
         NSWindowControllerClose(sMyWindowController)
      end if
   end unsafe
end handler

public handler ViewControllerCompletionHandler( in pContext as optional ObjcBlockPointer,in pNSViewController as optional ObjcId )
   variable tStr as optional String
   if pNSViewController is not nothing then
      put GetNSObjectClassName(pNSViewController) into tStr
      if tStr is "NSVisualEffectViewController" then
         put pNSViewController into sNSVisualEffectViewController
         -- OpenAUWindow()
      else
         log tStr
      end if
   end if
end handler

public unsafe handler LCImageToNSImage(in pImage as String) returns optional ObjcObject
	variable tObject as optional ScriptObject
	resolve script object pImage
	put the result into tObject

	variable tNSImage as optional ObjcObject
	variable tFile as String
	if tObject exists then
		put property "filename" of tObject into tFile
		if tFile is empty then
			variable tData as Data
			put property "text" of tObject into tData
			put NSImageAlloc() into tNSImage
			put NSImageInitWithData(tNSImage, DataToNSData(tData)) into tNSImage
		else
			resolve file tFile relative to tObject
			if the result is not nothing then
				put the result into tFile
			end if
		end if
	else
		resolve file pImage
		if the result is not nothing then
			put the result into tFile
		end if
	end if

	if tFile is not empty then
		put NSImageAlloc() into tNSImage
		put NSImageInitWithContentsOfFile(tNSImage, StringToNSString(tFile)) into tNSImage
	end if
   LogNSObjectClassName(tNSImage)
   log tNSImage
	return -- tNSImage
end handler

end library
